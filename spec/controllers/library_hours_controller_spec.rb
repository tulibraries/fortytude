# frozen_string_literal: true

require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe LibraryHoursController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # LibraryHours. As you add validations to LibraryHours, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # LibraryHoursController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "returns a success response" do
      library_hours = LibraryHours.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(response).to be_success
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      library_hours = LibraryHours.create! valid_attributes
      get :show, params: { id: library_hours.to_param }, session: valid_session
      expect(response).to be_success
    end
  end
  describe "build hours data structure" do

    let(:input) {
      [{ building: "paley", spaces: ["paley", "media"] }]
    }
    let(:output) {
      [{
        building: "paley",
        spaces: [{ slug: "media", hours: [["12/10/2018", "7am - 8pm"]] }]
      }]
    }
    let(:data_structure) {
      controller.send(:build_hours_data_structure, input)
    }

    it "returns the expected output" do
      allow(LibraryHours).to receive(:where).and_return([
        ["12/10/2018", "7am - 8pm"],
        ["12/10/2018", "7am - 8pm"],
        ["12/10/2018", "7am - 8pm"],
        ["12/10/2018", "7am - 8pm"],
        ["12/10/2018", "7am - 8pm"],
        ["12/10/2018", "7am - 8pm"],
        ["12/10/2018", "7am - 8pm"]
      ])
      expect(data_structure).to be_an Array
      expect(data_structure.first).to have_key :building
      expect(data_structure.first).to have_key :spaces
      expect(data_structure.first).to be_a Hash
      expect(data_structure.first).to have_key :building
      expect(data_structure.first[:building]).to be_a String
      expect(data_structure.first[:spaces].first).to be_a Hash
      expect(data_structure.first[:spaces].first).to have_key :slug
      expect(data_structure.first[:spaces].first[:slug]).to be_a String
      expect(data_structure.first[:spaces].first).to have_key :hours
      expect(data_structure.first[:spaces].first[:hours]).to be_an Array
      expect(data_structure.first[:spaces].first[:hours].first).to be_an Array
      expect(data_structure.first[:spaces].first[:hours].first.first).to be_a String
    end
  end
end
